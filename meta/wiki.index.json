{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "developer-guide": {
        "ownKey": "developer-guide",
        "childrenPages": {
          "contribution": {
            "ownKey": "contribution",
            "ownPages": [{
              "reference": {
                "path": "wiki/developer-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "contribution",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/contribution"
              },
              "next": {
                "path": "wiki/developer-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "project-setup",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/project-setup"
              },
              "description": "",
              "title": "Contribution",
              "content": "<div class=\"sect1\">\n<h2 id=\"_contribution\">Contribution<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>There are several ways in which you may contribute to this project.<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/camunda/camunda-rest-client-spring-boot/issues\">File issues<\/a><\/p>\n<\/li>\n<li>\n<p>Submit a pull requests<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_found_a_bug_or_missing_feature\">Found a bug or missing feature?<\/h3>\n<div class=\"paragraph\">\n<p>Please <a href=\"https://github.com/camunda/camunda-rest-client-spring-boot/issues\">file an issue<\/a> in our\nissue tracking system.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_submit_a_pull_request\">Submit a Pull Request<\/h3>\n<div class=\"paragraph\">\n<p>If you found a solution to an <a href=\"https://github.com/camunda/camunda-rest-client-spring-boot\">open issue<\/a>\nand implemented it, we would be happy to add your contribution in the code base. For doing so,\nplease create a pull request. Prior to that, please make sure you<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>rebased against the <code>develop<\/code> branch<\/p>\n<\/li>\n<li>\n<p>stick to project coding conventions<\/p>\n<\/li>\n<li>\n<p>added test cases for the problem you are solving<\/p>\n<\/li>\n<li>\n<p>added docs, describing the change<\/p>\n<\/li>\n<li>\n<p>generally comply with codeacy report<\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
            }]
          },
          "project-setup": {
            "ownKey": "project-setup",
            "ownPages": [{
              "reference": {
                "path": "wiki/developer-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "project-setup",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/project-setup"
              },
              "previous": {
                "path": "wiki/developer-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "contribution",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/contribution"
              },
              "description": "",
              "title": "Project Setup",
              "content": "<div class=\"sect1\">\n<h2 id=\"_project_setup\">Project Setup<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you are interested in developing and building the project please read the following the instructions carefully.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_version_control\">Version control<\/h3>\n<div class=\"paragraph\">\n<p>To get sources of the project, please execute:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git clone https://github.com/camunda/camunda-rest-client-spring-boot.git\ncd camunda-rest-client-spring-boot<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>We are using gitflow in our git SCM for naming brnaches. That means that you should start from <code>develop<\/code> branch,\ncreate a <code>feature/&lt;name&gt;<\/code> out of it and once it is completed create a pull request containing\nit. Please squash your commits before submitting and use semantic commit messages, if possible.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_project_build\">Project Build<\/h3>\n<div class=\"paragraph\">\n<p>Perform the following steps to get a development setup up and running.<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw clean install<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_integration_tests\">Integration Tests<\/h3>\n<div class=\"paragraph\">\n<p>By default, the build command will ignore the run of <code>failsafe<\/code> Maven plugin executing the integration tests\n(usual JUnit tests with class names ending with ITest). In order to run integration tests, please\ncall from your command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -Pitest<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_project_build_modes_and_profiles\">Project build modes and profiles<\/h3>\n<div class=\"sect3\">\n<h4 id=\"_camunda_version\">Camunda Version<\/h4>\n<div class=\"paragraph\">\n<p>You can choose the used Camunda version by specifying the profile <code>camunda-ee<\/code> or <code>camunda-ce<\/code>. The default\nversion is a Community Edition. Specify <code>-Pcamunda-ee<\/code> to switch to Camunda Enterprise edition. This will\nrequire a valid Camunda license. You can put it into a file <code>~/.camunda/license.txt<\/code> and it will be detected\nautomatically.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_documentation\">Documentation<\/h4>\n<div class=\"paragraph\">\n<p>We are using <a href=\"https://github.com/JavaEden/Orchid\">JavaEden Orchid<\/a> for generation of a static site documentation and\nrely on AsciiDoc as much as possible.<\/p>\n<\/div>\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Tip<\/div>\n<\/td>\n<td class=\"content\">\nIf you want to develop your docs in 'live' mode, run <code>./mvnw -f docs -Pserve-docs<\/code> and access\nthe <a href=\"http://localhost:8080/\" class=\"bare\">http://localhost:8080/<\/a> from your browser.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>For creation of documentation, please run:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -f docs orchid:build<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Warning<\/div>\n<\/td>\n<td class=\"content\">\nThis operation requires special permissions. You need to replace <code>GITHUB_TOKEN<\/code> by the token of\nthe github pages repository, allowing to publish the pages.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to publish documentation to github pages, please run from command line<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw -f docs -Pdeploy-docs -DgithubToken=GITHUB_TOKEN<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_generation_of_javadoc_and_sources\">Generation of JavaDoc and Sources<\/h4>\n<div class=\"paragraph\">\n<p>By default, the sources and javadoc API documentation are not generated from the source code. To enable this:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvnw clean install -Prelease<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_starting_example_application\">Starting example application<\/h4>\n<div class=\"paragraph\">\n<p>To start applications, either use your IDE and create\nrun configuration for the class:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>org.camunda.bpm.extension.rest.example.CamundaBpmFeignExampleApplication<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"paragraph\">\n<p>Alternatively, you can run them from the command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./mvn spring-boot:run -f example<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_continuous_integration\">Continuous Integration<\/h3>\n<div class=\"paragraph\">\n<p>Travis CI is building all branches on commit hook.\nIn addition, a private-hosted Jenkins CI by Camunda is used to build the releases from <code>master<\/code> branch.<\/p>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_release_management\">Release Management<\/h3>\n<div class=\"paragraph\">\n<p>Release management has been set-up for use of Sonatype Nexus (= Maven Central) and are produced by Camunda Jenkins.<\/p>\n<\/div>\n<div class=\"sect3\">\n<h4 id=\"_what_modules_get_deployed_to_repository\">What modules get deployed to repository<\/h4>\n<div class=\"paragraph\">\n<p>Every Maven module is enabled by default. If you want to change this, please provide the property<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>inside the corresponding <code>pom.xml<\/code>. Currently, all examples are <em>EXCLUDED<\/em> from publication into Maven Central.<\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
            }]
          }
        },
        "ownPages": [
          {
            "reference": {
              "path": "wiki",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "developer-guide",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide"
            },
            "description": "",
            "title": "Developer Guide",
            "content": "<html>\n <head><\/head>\n <body>\n  <h2><\/h2> \n  <p><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/contribution\">Contribution<\/a><\/p> \n  <p><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/project-setup\">Project Setup<\/a><\/p> \n <\/body>\n<\/html>\n"
          },
          {
            "reference": {
              "path": "wiki/developer-guide",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "book",
              "extension": "pdf",
              "usePrettyUrl": false,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/developer-guide/book.pdf"
            },
            "description": "",
            "title": "Developer Guide Book",
            "content": ""
          }
        ]
      },
      "user-guide": {
        "ownKey": "user-guide",
        "childrenPages": {
          "examples": {
            "ownKey": "examples",
            "ownPages": [{
              "reference": {
                "path": "wiki/user-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "examples",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/examples"
              },
              "next": {
                "path": "wiki/user-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "logging",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/logging"
              },
              "description": "",
              "title": "Working example",
              "content": "<div class=\"sect1\">\n<h2 id=\"_working_example\">Working example<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We provide demonstrating the usage of the library, depending on the context.<\/p>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_standalone_usage\">Standalone usage<\/h3>\n<div class=\"paragraph\">\n<p>The example demonstrates the usage of the library accessing a process engine via REST from an arbitrary SpringBoot\napplication. The client executes the following steps:<\/p>\n<\/div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 1. Timing overview of the example<\/caption>\n<colgroup>\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 60%;\">\n<\/colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Initial offset<\/th>\n<th class=\"tableblock halign-left valign-top\">Repeat<\/th>\n<th class=\"tableblock halign-left valign-top\">Invoked method<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">8.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">-<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Get deployed processes<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">10.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Start process<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">12.5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Send signal<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">13.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Correlate message<\/p><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<div class=\"sect3\">\n<h4 id=\"_how_does_it_work\">How does it work<\/h4>\n<div class=\"paragraph\">\n<p>The application uses the library by adding it to the classpath via Apache Maven dependency. That is:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">    &lt;dependency&gt;\n      &lt;groupId&gt;org.camunda.bpm.extension.rest&lt;/groupId&gt;\n      &lt;artifactId&gt;camunda-rest-client-spring-boot-starter&lt;/artifactId&gt;\n      &lt;version&gt;${project.version}&lt;/version&gt;\n    &lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to activate the library, the <code>@EnableCamundaRestClient<\/code> has been put\non the configuration class of the application. The interesting part is now the <code>ProcessClient<\/code> component.\nThis Spring Component has several methods marked with <code>@Scheduled<\/code> annotation to demonstrate\nthe time-based execution of desired functionality. To do so, the component has two injected resources,\nboth marked with the <code>@Qualifier(\"remote\")<\/code> annotation. This annotation indicates that the\nremote version of the Camunda API services are used.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to configure the library, a block of properties e.g. in <code>application.yml<\/code> is required.\nThe values specify the location of the remote process engine:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">feign:\n  client:\n    config:\n      remoteRuntimeService:\n        url: \"http://localhost:8083/rest/engine/default/\"\n      remoteRepositoryService:\n        url: \"http://localhost:8083/rest/engine/default/\"<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>To run this example, you will need the server part from the next example. To activate the server part only, please\nrun from command line:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>mvn clean install\nmvn -f examples/example -Prun\nmvn -f examples/example-provided -Prun-server-only<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_usage_inside_a_process_application\">Usage inside a process application<\/h3>\n<div class=\"paragraph\">\n<p>The example demonstrates the usage of the library for accessing a process engine via REST from a Camunda process application.\nThe key difference to the previous example is that the required Camunda classes are already present on the classpath and\nan engine is initialized and is running.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>Imagine the process engine has the following process deployed:<\/p>\n<\/div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://camunda.github.io/camunda-rest-client-spring-boot/assets/media/process_messaging.png\" alt=\"Example messaging process\" width=\"60% 60%\">\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>The client (running technically in the same JVM, but accessing the engine via REST) again executes the following steps:<\/p>\n<\/div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<caption class=\"title\">Table 2. Timing overview of the example<\/caption>\n<colgroup>\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 60%;\">\n<\/colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Initial offset<\/th>\n<th class=\"tableblock halign-left valign-top\">Repeat<\/th>\n<th class=\"tableblock halign-left valign-top\">Invoked method<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">8.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">-<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Get deployed processes<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">10.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Start process<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">12.5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Send signal<\/p><\/td>\n<\/tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">13.0 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">5 sec<\/p><\/td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Correlate message<\/p><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<div class=\"sect3\">\n<h4 id=\"_how_does_it_work_2\">How does it work<\/h4>\n<div class=\"paragraph\">\n<p>The application uses the library by adding it to the classpath via Apache Maven dependency. That is:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">    &lt;dependency&gt;\n      &lt;groupId&gt;org.camunda.bpm.extension.rest&lt;/groupId&gt;\n      &lt;artifactId&gt;camunda-rest-client-spring-boot-starter-provided&lt;/artifactId&gt;\n      &lt;version&gt;${project.version}&lt;/version&gt;\n    &lt;/dependency&gt;<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note<\/div>\n<\/td>\n<td class=\"content\">\nPlease note that we use a different starter. The suffix <code>provided<\/code> in the artifact name indicates that the engine\nis already a part of the application and doesn&#8217;t need to be put on classpath.\n<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to activate the library, the <code>@EnableCamundaRestClient<\/code> has been put\non the configuration class of the application. The interesting part is now the <code>ProcessClient<\/code> component.\nThis Spring Component has several methods marked with <code>@Scheduled<\/code> annotation to demonstrate the time-based execution\nof desired functionality. To do so, the component has two injected resources, both marked with the <code>@Qualifier(\"remote\")<\/code>\nannotation. This annotation indicates that the remote version of the Camunda API services are used.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to configure the library, a block of properties e.g. in <code>application.yml<\/code> is required:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">feign:\n  client:\n    config:\n      remoteRuntimeService:\n        url: \"http://localhost:8083/rest/engine/default/\"\n      remoteRepositoryService:\n        url: \"http://localhost:8083/rest/engine/default/\"<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
            }]
          },
          "logging": {
            "ownKey": "logging",
            "ownPages": [{
              "reference": {
                "path": "wiki/user-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "logging",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/logging"
              },
              "previous": {
                "path": "wiki/user-guide",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "examples",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/examples"
              },
              "description": "",
              "title": "Logging",
              "content": "<div class=\"sect1\">\n<h2 id=\"_logging\">Logging<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>OpenFeign library used in the camunda-rest-client-spring-boot has a high-configurable logging facility.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to configure it, a block of properties e.g. in <code>application.yml<\/code> is required:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">logging:\n  level:\n    org.camunda.bpm.extension.rest.client.RuntimeServiceClient: DEBUG\n    org.camunda.bpm.extension.rest.client.RepositoryServiceClient: DEBUG<\/code><\/pre>\n<\/div>\n<\/div>\n<div class=\"paragraph\">\n<p>In order to enable Request/Response logging, you need to configure additional Feign logging\nby providing a factory bean:<\/p>\n<\/div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import feign.Logger;\n\n@Configuration\npublic class MyConfiguration {\n    /**\n     * Full debug of feign client, including request/response\n     */\n    @Bean\n    public Logger.Level feignLoggerLevel() {\n        return Logger.Level.FULL;\n    }\n}<\/code><\/pre>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
            }]
          }
        },
        "ownPages": [
          {
            "reference": {
              "path": "wiki",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "user-guide",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide"
            },
            "description": "",
            "title": "User Guide",
            "content": "<html>\n <head><\/head>\n <body>\n  <h2 id=\"examples\">Examples<\/h2> \n  <ul> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/examples\">Examples<\/a><\/li> \n  <\/ul> \n  <h2 id=\"configuration\">Configuration<\/h2> \n  <ul> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/logging\">Logging<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
          },
          {
            "reference": {
              "path": "wiki/user-guide",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "book",
              "extension": "pdf",
              "usePrettyUrl": false,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/user-guide/book.pdf"
            },
            "description": "",
            "title": "User Guide Book",
            "content": ""
          }
        ]
      },
      "introduction": {
        "ownKey": "introduction",
        "childrenPages": {
          "features": {
            "ownKey": "features",
            "ownPages": [{
              "reference": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "features",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/features"
              },
              "next": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "solution",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/solution"
              },
              "previous": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "motivation",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/motivation"
              },
              "description": "",
              "title": "Features",
              "content": "<div class=\"sect1\">\n<h2 id=\"_features\">Features<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The library supports the following features:<\/p>\n<\/div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Usage of openfeign library to allow for high-customizable REST client<\/p>\n<\/li>\n<li>\n<p>Provides a SpringBoot starter for usage in standalone client mode<\/p>\n<\/li>\n<li>\n<p>Provides a SpringBoot starter for usage inside a process application<\/p>\n<\/li>\n<li>\n<p>Implemented Services:<\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>RuntimeService<\/code><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Process start by key: <code>#startProcessInstanceByKey()<\/code><\/p>\n<\/li>\n<li>\n<p>Process start by id: <code>#startProcessInstanceById()<\/code><\/p>\n<\/li>\n<li>\n<p>Message correlation: <code>#correlateMessage()<\/code>, <code>#createMessageCorrelation()<\/code><\/p>\n<\/li>\n<li>\n<p>Signal event: <code>#signalEventReceived()<\/code>, <code>#createSignalEvent()<\/code><\/p>\n<\/li>\n<li>\n<p>Execution trigger: <code>#signal()<\/code><\/p>\n<\/li>\n<li>\n<p>Read variables: <code>#getVariable()<\/code>,<code>#getVariables()<\/code>, <code>#getVariableTyped()<\/code>, <code>#getVariablesTyped()<\/code><\/p>\n<\/li>\n<li>\n<p>Read local variables: <code>#getVariableLocal()<\/code>,<code>#getVariablesLocal()<\/code>, <code>#getVariableLocalTyped()<\/code>, <code>#getVariablesLocalTyped()<\/code><\/p>\n<\/li>\n<li>\n<p>Write variables: <code>#setVariable()<\/code>,<code>#setVariables()<\/code>, <code>#setVariableTyped()<\/code>, <code>#setVariablesTyped()<\/code><\/p>\n<\/li>\n<li>\n<p>Delete variables: <code>#removeVariable()<\/code>,<code>#removeVariables()<\/code><\/p>\n<\/li>\n<li>\n<p>Write local variables: <code>#setVariableLocal()<\/code>,<code>#setVariablesLocal()<\/code>, <code>#setVariableLocalTyped()<\/code>, <code>#setVariablesLocalTyped()<\/code><\/p>\n<\/li>\n<li>\n<p>Delete local variables: <code>#removeVariableLocal()<\/code>,<code>#removeVariablesLocal()<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<li>\n<p><code>RepositoryService<\/code><\/p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Query for process definitions: <code>#createProcessDefinitionQuery()<\/code><\/p>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<\/li>\n<\/ul>\n<\/div>\n<div class=\"sect2\">\n<h3 id=\"_disclaimer\">Disclaimer<\/h3>\n<div class=\"paragraph\">\n<p>Please note that this library aims to support the entire REST library of Camunda, excluding External Task Endpoint.\nIf you need the external task client, please use: <a href=\"https://docs.camunda.org/manual/latest/user-guide/ext-client/\">External Task Client<\/a><\/p>\n<\/div>\n<\/div>\n<\/div>\n<\/div>"
            }]
          },
          "solution": {
            "ownKey": "solution",
            "ownPages": [{
              "reference": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "solution",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/solution"
              },
              "next": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "further-outlook",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/further-outlook"
              },
              "previous": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "features",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/features"
              },
              "description": "",
              "title": "Solution Idea",
              "content": "<div class=\"sect1\">\n<h2 id=\"_solution_idea\">Solution Idea<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The library uses the popular Java REST client OpenFeign embedded into Spring-Cloud-Feign-Starter\nand provides implementations of Java Camunda Engine Core API, accessing the remote engine via REST API.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>In doing so, the remote version of the Camunda Engine API can be easily integrated in\nexisting application using provided SpringBoot Starter.<\/p>\n<\/div>\n<\/div>\n<\/div>"
            }]
          },
          "further-outlook": {
            "ownKey": "further-outlook",
            "ownPages": [{
              "reference": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "further-outlook",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/further-outlook"
              },
              "previous": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "solution",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/solution"
              },
              "description": "",
              "title": "Further outlook",
              "content": "<div class=\"sect1\">\n<h2 id=\"_further_outlook\">Further outlook<\/h2>\n<div class=\"sectionbody\">\n\n<\/div>\n<\/div>"
            }]
          },
          "motivation": {
            "ownKey": "motivation",
            "ownPages": [{
              "reference": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "motivation",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/motivation"
              },
              "next": {
                "path": "wiki/introduction",
                "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
                "fileName": "features",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/features"
              },
              "description": "",
              "title": "Motivation",
              "content": "<div class=\"sect1\">\n<h2 id=\"_motivation\">Motivation<\/h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>During the development of Camunda process applications you have to choose if your applications is either\n<em>using<\/em> Camunda Engine or <em>is<\/em> Camunda Engine. Depending on this decision, you are accessing Camunda via REST\nor Java API.<\/p>\n<\/div>\n<div class=\"paragraph\">\n<p>While Camunda Engine Core API provides well-designed and easy-accessible programming interface for Java, the\nusage of REST interface requires additional development. In order to enable the usage of REST API from Java\nand allow for easy integration into Spring Boot applications, the Camunda REST Client Spring-Boot library has\nbeen developed.<\/p>\n<\/div>\n<\/div>\n<\/div>"
            }]
          }
        },
        "ownPages": [
          {
            "reference": {
              "path": "wiki",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "introduction",
              "extension": "html",
              "usePrettyUrl": true,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction"
            },
            "description": "",
            "title": "Introduction",
            "content": "<html>\n <head><\/head>\n <body>\n  <h2><\/h2> \n  <ul> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/motivation\">Motivation<\/a><\/li> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/features\">Features<\/a><\/li> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/solution\">Solution Strategy<\/a><\/li> \n   <li><a href=\"https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/further-outlook\">Further Outlook<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
          },
          {
            "reference": {
              "path": "wiki/introduction",
              "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
              "fileName": "book",
              "extension": "pdf",
              "usePrettyUrl": false,
              "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki/introduction/book.pdf"
            },
            "description": "",
            "title": "Introduction Book",
            "content": ""
          }
        ]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://camunda.github.io/camunda-rest-client-spring-boot",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://camunda.github.io/camunda-rest-client-spring-boot/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": ""
    }]
  }}
}